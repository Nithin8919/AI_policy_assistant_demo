version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:pg15
    container_name: policy_postgres
    environment:
      POSTGRES_DB: policy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./vector_db/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql
    networks:
      - policy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d policy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: policy_neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - policy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: policy_api
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: policy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./data_pipeline:/app/data_pipeline
      - ./graph_db:/app/graph_db
      - ./vector_db:/app/vector_db
      - ./data:/app/data
      - ./cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - policy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit UI
  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: policy_ui
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: policy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    ports:
      - "8501:8501"
    volumes:
      - ./ui:/app/ui
      - ./backend:/app/backend
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - policy_network
    restart: unless-stopped

  # Data Pipeline Worker (optional)
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    container_name: policy_pipeline
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: policy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    volumes:
      - ./data_pipeline:/app/data_pipeline
      - ./data:/app/data
      - ./cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - policy_network
    restart: "no"  # Run manually when needed
    profiles:
      - pipeline

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: policy_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - policy_network
    restart: unless-stopped
    profiles:
      - cache

  # Elasticsearch for full-text search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: policy_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - policy_network
    restart: unless-stopped
    profiles:
      - search

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: policy_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - ui
    networks:
      - policy_network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  policy_network:
    driver: bridge

