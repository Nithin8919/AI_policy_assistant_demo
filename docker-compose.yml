version: '3.8'

services:
  # Weaviate Vector Database (REPLACES PostgreSQL+pgvector)
  weaviate:
    image: semitechnologies/weaviate:1.24.1
    container_name: ap_policy_weaviate
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - policy_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Graph Database (UNCHANGED)
  neo4j:
    image: neo4j:5.15-community
    container_name: ap_policy_neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - policy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend (UPDATED FOR WEAVIATE)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ap_policy_backend
    environment:
      # Weaviate Configuration (NEW)
      WEAVIATE_URL: http://weaviate:8080
      WEAVIATE_TIMEOUT: 30
      WEAVIATE_BATCH_SIZE: 100
      
      # Neo4j Configuration (UNCHANGED)
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      
      # Model Configuration
      EMBEDDING_MODEL: all-MiniLM-L6-v2
      EMBEDDING_DIMENSION: 384
      SIMILARITY_THRESHOLD: 0.7
      MAX_RESULTS: 10
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./pipeline:/app/pipeline
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      weaviate:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - policy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit UI (UPDATED FOR WEAVIATE)
  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: ap_policy_ui
    environment:
      # Backend API URL
      BACKEND_URL: http://api:8000
      
      # For direct access if needed
      WEAVIATE_URL: http://weaviate:8080
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    ports:
      - "8501:8501"
    volumes:
      - ./ui:/app/ui
      - ./backend:/app/backend
      - ./data:/app/data
    depends_on:
      weaviate:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - policy_network
    restart: unless-stopped

  # Data Pipeline Worker (UPDATED FOR WEAVIATE)
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    container_name: ap_policy_pipeline
    environment:
      # Weaviate Configuration (NEW)
      WEAVIATE_URL: http://weaviate:8080
      WEAVIATE_TIMEOUT: 30
      WEAVIATE_BATCH_SIZE: 100
      
      # Neo4j Configuration (UNCHANGED)
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      
      # Model Configuration
      EMBEDDING_MODEL: all-MiniLM-L6-v2
      EMBEDDING_DIMENSION: 384
    volumes:
      - ./pipeline:/app/pipeline
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      weaviate:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - policy_network
    restart: "no"  # Run manually when needed
    profiles:
      - pipeline

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: policy_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - policy_network
    restart: unless-stopped
    profiles:
      - cache

  # Elasticsearch for full-text search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: policy_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - policy_network
    restart: unless-stopped
    profiles:
      - search

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: policy_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - ui
    networks:
      - policy_network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  weaviate_data:  # NEW - Replaces postgres_data
    driver: local
  neo4j_data:     # UNCHANGED
    driver: local
  neo4j_logs:     # UNCHANGED
    driver: local
  neo4j_import:   # UNCHANGED
    driver: local
  neo4j_plugins:  # UNCHANGED
    driver: local
  redis_data:     # UNCHANGED
    driver: local
  elasticsearch_data:  # UNCHANGED
    driver: local

networks:
  policy_network:
    driver: bridge

